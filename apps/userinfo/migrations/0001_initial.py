# Generated by Django 2.2.1 on 2019-09-23 13:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, default='菜鸡', max_length=30, null=True, verbose_name='昵称')),
                ('betcoin', models.CharField(blank=True, default='[0,0,0,0,0,0,0,0,0]', max_length=128, null=True, verbose_name='下注金币')),
                ('coin', models.BigIntegerField(default=0, verbose_name='金币数量')),
                ('diamond', models.BigIntegerField(default=0, verbose_name='钻石数量')),
                ('level', models.BigIntegerField(default=0, verbose_name='等级')),
                ('code', models.CharField(default='0000', max_length=30, verbose_name='邀请码')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户管理',
                'verbose_name_plural': '用户管理',
                'ordering': ['-level'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Debug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debug', models.BooleanField(default=False, verbose_name='是否是测试模式')),
                ('resultid', models.IntegerField(choices=[(0, '大橘子'), (1, '大铃铛'), (2, '小bar'), (3, 'bar'), (4, '大苹果'), (5, '小苹果'), (6, '大芒果'), (7, '大西瓜'), (8, '小西瓜'), (9, '小luck'), (10, '大苹果'), (11, '小橘子'), (12, '大橘子'), (13, '大铃铛'), (14, '小77'), (15, '大77'), (16, '大苹果'), (17, '小芒果'), (18, '大芒果'), (19, '大星星'), (20, '小星星'), (21, '大luck'), (22, '大苹果'), (23, '小铃铛'), (24, '小三元'), (25, '大三元'), (26, '小满贯'), (27, '大满贯'), (28, '跳远-铃铛'), (29, '跳远-橘子'), (30, '跳远-芒果'), (31, '跳远-77'), (32, '跳远-西瓜'), (33, '跳远-双星'), (34, '跳远-苹果'), (35, 'eat')], default=0, verbose_name='中奖id')),
            ],
            options={
                'verbose_name': '固定开奖模式',
                'verbose_name_plural': '固定开奖模式',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('poolState', models.IntegerField(default=0, verbose_name='状态')),
                ('currentPool', models.IntegerField(default=0, verbose_name='当前奖池')),
                ('poolsize', models.IntegerField(default=0, verbose_name='奖池大小')),
                ('pumprate', models.IntegerField(choices=[(30, '低-30%'), (55, '中55%'), (80, '高-80%')], default=10, verbose_name='奖池抽水率')),
                ('income', models.BigIntegerField(default=0, verbose_name='收益')),
            ],
            options={
                'verbose_name': '游戏设置',
                'verbose_name_plural': '游戏设置',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PoolHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('historypoolState', models.IntegerField(default=0, verbose_name='奖池状态')),
                ('historycurrentPool', models.IntegerField(default=0, verbose_name='当前奖池')),
                ('historypoolsize', models.IntegerField(default=0, verbose_name='奖池大小')),
                ('historypumprate', models.IntegerField(default=10, verbose_name='奖池抽水率(%)')),
                ('historyincome', models.BigIntegerField(default=0, verbose_name='奖池收益')),
                ('userid', models.BigIntegerField(default=0, verbose_name='用户id')),
                ('usernickname', models.BigIntegerField(default=0, verbose_name='用户名称')),
                ('userbetsum', models.BigIntegerField(default=0, verbose_name='用户下注')),
                ('userwin', models.BigIntegerField(default=0, verbose_name='用户赢取金币')),
            ],
            options={
                'verbose_name': '历史记录',
                'verbose_name_plural': '历史记录',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='MailList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isread', models.BooleanField(default=False, verbose_name='是否已读(是否已提取)')),
                ('note', models.CharField(default='无备注', max_length=30, verbose_name='内容')),
                ('diamond', models.BigIntegerField(default=0, verbose_name='钻石数量')),
                ('fromid', models.ForeignKey(help_text='发件人', on_delete=django.db.models.deletion.DO_NOTHING, to='userinfo.UserInfo', verbose_name='发件人')),
                ('sendid', models.ForeignKey(help_text='收件人', on_delete=django.db.models.deletion.DO_NOTHING, related_name='sendid', to='userinfo.UserInfo', verbose_name='收件人')),
            ],
            options={
                'verbose_name': '邮件列表',
                'verbose_name_plural': '邮件列表',
                'ordering': ['-fromid'],
            },
        ),
        migrations.CreateModel(
            name='FriendList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('friend', models.ForeignKey(help_text='好友id', on_delete=django.db.models.deletion.DO_NOTHING, related_name='friend', to='userinfo.UserInfo')),
                ('user', models.ForeignKey(help_text='用户id', on_delete=django.db.models.deletion.DO_NOTHING, to='userinfo.UserInfo')),
            ],
            options={
                'verbose_name': '好友关系',
                'verbose_name_plural': '好友关系',
                'ordering': ['-user'],
            },
        ),
    ]
